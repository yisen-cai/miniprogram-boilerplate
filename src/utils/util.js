"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.pageParamsOf = exports.uuid = exports.wechatLogin = exports.formatTime = void 0;
const config_1 = require("../config/config");
const formatTime = (date) => {
    const year = date.getFullYear();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const hour = date.getHours();
    const minute = date.getMinutes();
    const second = date.getSeconds();
    return ([year, month, day].map(formatNumber).join('/') +
        ' ' +
        [hour, minute, second].map(formatNumber).join(':'));
};
exports.formatTime = formatTime;
const formatNumber = (n) => {
    const s = n.toString();
    return s[1] ? s : `0 + ${s}`;
};
function wechatLogin(success) {
    wx.login({
        success: res => {
            if (res.code) {
                wx.request({
                    url: config_1.default.API + '/wechat/mini-program/login',
                    method: 'POST',
                    data: {
                        jsCode: res.code
                    },
                    success: success
                });
            }
        },
    });
}
exports.wechatLogin = wechatLogin;
const uuid = () => {
    var s = [];
    var hexDigits = "0123456789abcdef";
    for (var i = 0; i < 36; i++) {
        s[i] = hexDigits.substr(Math.floor(Math.random() * 0x10), 1);
    }
    s[14] = "4";
    s[19] = hexDigits.substr((s[19] & 0x3) | 0x8, 1);
    var uuid = s.join("");
    return uuid;
};
exports.uuid = uuid;
function pageParamsOf(page = 0, size = 20, sort = null) {
    let params = new Map();
    params.set('page', page);
    params.set('size', size);
    if (sort != null) {
        params.set('sort', sort);
    }
    return params;
}
exports.pageParamsOf = pageParamsOf;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbInV0aWwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsNkNBQXFDO0FBRTlCLE1BQU0sVUFBVSxHQUFHLENBQUMsSUFBVSxFQUFFLEVBQUU7SUFDdkMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFdBQVcsRUFBRSxDQUFBO0lBQy9CLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsR0FBRyxDQUFDLENBQUE7SUFDakMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFBO0lBQzFCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxRQUFRLEVBQUUsQ0FBQTtJQUM1QixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLENBQUE7SUFDaEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFBO0lBRWhDLE9BQU8sQ0FDTCxDQUFDLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLFlBQVksQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7UUFDOUMsR0FBRztRQUNILENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUNuRCxDQUFBO0FBQ0gsQ0FBQyxDQUFBO0FBYlksUUFBQSxVQUFVLGNBYXRCO0FBRUQsTUFBTSxZQUFZLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRTtJQUNqQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsUUFBUSxFQUFFLENBQUE7SUFDdEIsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQUUsQ0FBQTtBQUM5QixDQUFDLENBQUE7QUFPRCxTQUFnQixXQUFXLENBQUMsT0FBaUQ7SUFDM0UsRUFBRSxDQUFDLEtBQUssQ0FBQztRQUNQLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFBRTtZQUViLElBQUksR0FBRyxDQUFDLElBQUksRUFBRTtnQkFDWixFQUFFLENBQUMsT0FBTyxDQUFDO29CQUNULEdBQUcsRUFBRSxnQkFBTSxDQUFDLEdBQUcsR0FBRyw0QkFBNEI7b0JBQzlDLE1BQU0sRUFBRSxNQUFNO29CQUNkLElBQUksRUFBRTt3QkFDSixNQUFNLEVBQUUsR0FBRyxDQUFDLElBQUk7cUJBQ2pCO29CQUNELE9BQU8sRUFBRSxPQUFPO2lCQUNqQixDQUFDLENBQUM7YUFDSjtRQUNILENBQUM7S0FDRixDQUFDLENBQUM7QUFDTCxDQUFDO0FBaEJELGtDQWdCQztBQUVNLE1BQU0sSUFBSSxHQUFHLEdBQUcsRUFBRTtJQUN2QixJQUFJLENBQUMsR0FBRyxFQUFFLENBQUM7SUFDWCxJQUFJLFNBQVMsR0FBRyxrQkFBa0IsQ0FBQztJQUNuQyxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFO1FBQzNCLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQzlEO0lBQ0QsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQTtJQUNYLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUd0RCxJQUFJLElBQUksR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0lBQ3RCLE9BQU8sSUFBSSxDQUFDO0FBQ2QsQ0FBQyxDQUFBO0FBWlksUUFBQSxJQUFJLFFBWWhCO0FBR0QsU0FBZ0IsWUFBWSxDQUFDLE9BQWUsQ0FBQyxFQUFFLE9BQWUsRUFBRSxFQUFFLE9BQXNCLElBQUk7SUFDMUYsSUFBSSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQWUsQ0FBQztJQUNwQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN6QixJQUFHLElBQUksSUFBSSxJQUFJLEVBQUU7UUFDZixNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsQ0FBQztLQUMxQjtJQUNELE9BQU8sTUFBTSxDQUFDO0FBQ2hCLENBQUM7QUFSRCxvQ0FRQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBDb25maWcgZnJvbSBcIi4uL2NvbmZpZy9jb25maWdcIlxuXG5leHBvcnQgY29uc3QgZm9ybWF0VGltZSA9IChkYXRlOiBEYXRlKSA9PiB7XG4gIGNvbnN0IHllYXIgPSBkYXRlLmdldEZ1bGxZZWFyKClcbiAgY29uc3QgbW9udGggPSBkYXRlLmdldE1vbnRoKCkgKyAxXG4gIGNvbnN0IGRheSA9IGRhdGUuZ2V0RGF0ZSgpXG4gIGNvbnN0IGhvdXIgPSBkYXRlLmdldEhvdXJzKClcbiAgY29uc3QgbWludXRlID0gZGF0ZS5nZXRNaW51dGVzKClcbiAgY29uc3Qgc2Vjb25kID0gZGF0ZS5nZXRTZWNvbmRzKClcblxuICByZXR1cm4gKFxuICAgIFt5ZWFyLCBtb250aCwgZGF5XS5tYXAoZm9ybWF0TnVtYmVyKS5qb2luKCcvJykgK1xuICAgICcgJyArXG4gICAgW2hvdXIsIG1pbnV0ZSwgc2Vjb25kXS5tYXAoZm9ybWF0TnVtYmVyKS5qb2luKCc6JylcbiAgKVxufVxuXG5jb25zdCBmb3JtYXROdW1iZXIgPSAobjogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IHMgPSBuLnRvU3RyaW5nKClcbiAgcmV0dXJuIHNbMV0gPyBzIDogYDAgKyAke3N9YFxufVxuXG5cbi8qKlxuICogV2VjaGF0IGxvZ2luIHRvIGV4Y2hhbmdlIGFjY2Vzc1Rva2VuLlxuICogQHBhcmFtIHN1Y2Nlc3MgU3VjY2VzcyBjYWxsYmFjay5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHdlY2hhdExvZ2luKHN1Y2Nlc3M6IFdlY2hhdE1pbmlwcm9ncmFtLlJlcXVlc3RTdWNjZXNzQ2FsbGJhY2spIHtcbiAgd3gubG9naW4oe1xuICAgIHN1Y2Nlc3M6IHJlcyA9PiB7XG4gICAgICAvLyDlj5HpgIEgcmVzLmNvZGUg5Yiw5ZCO5Y+w5o2i5Y+WIG9wZW5JZCwgc2Vzc2lvbktleSwgdW5pb25JZFxuICAgICAgaWYgKHJlcy5jb2RlKSB7XG4gICAgICAgIHd4LnJlcXVlc3Qoe1xuICAgICAgICAgIHVybDogQ29uZmlnLkFQSSArICcvd2VjaGF0L21pbmktcHJvZ3JhbS9sb2dpbicsXG4gICAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAganNDb2RlOiByZXMuY29kZVxuICAgICAgICAgIH0sXG4gICAgICAgICAgc3VjY2Vzczogc3VjY2Vzc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICB9KTtcbn1cblxuZXhwb3J0IGNvbnN0IHV1aWQgPSAoKSA9PiB7XG4gIHZhciBzID0gW107XG4gIHZhciBoZXhEaWdpdHMgPSBcIjAxMjM0NTY3ODlhYmNkZWZcIjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCAzNjsgaSsrKSB7XG4gICAgc1tpXSA9IGhleERpZ2l0cy5zdWJzdHIoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogMHgxMCksIDEpO1xuICB9XG4gIHNbMTRdID0gXCI0XCIgLy8gYml0cyAxMi0xNSBvZiB0aGUgdGltZV9oaV9hbmRfdmVyc2lvbiBmaWVsZCB0byAwMDEwXG4gIHNbMTldID0gaGV4RGlnaXRzLnN1YnN0cigoPGFueT5zWzE5XSAmIDB4MykgfCAweDgsIDEpOyAvLyBiaXRzIDYtNyBvZiB0aGUgY2xvY2tfc2VxX2hpX2FuZF9yZXNlcnZlZCB0byAwMVxuICAvLyBzWzhdID0gc1sxM10gPSBzWzE4XSA9IHNbMjNdID0gXCItXCJcblxuICB2YXIgdXVpZCA9IHMuam9pbihcIlwiKTtcbiAgcmV0dXJuIHV1aWQ7XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIHBhZ2VQYXJhbXNPZihwYWdlOiBudW1iZXIgPSAwLCBzaXplOiBudW1iZXIgPSAyMCwgc29ydDogc3RyaW5nIHwgbnVsbCA9IG51bGwpOiBNYXA8c3RyaW5nLCBhbnk+IHtcbiAgbGV0IHBhcmFtcyA9IG5ldyBNYXA8c3RyaW5nLCBhbnk+KCk7XG4gIHBhcmFtcy5zZXQoJ3BhZ2UnLCBwYWdlKTtcbiAgcGFyYW1zLnNldCgnc2l6ZScsIHNpemUpO1xuICBpZihzb3J0ICE9IG51bGwpIHtcbiAgICBwYXJhbXMuc2V0KCdzb3J0Jywgc29ydCk7XG4gIH1cbiAgcmV0dXJuIHBhcmFtcztcbn0iXX0=