"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.netRequest = void 0;
const config_1 = require("../config/config");
const serverErrorPattern = new RegExp('^5..$');
const clientErrorPattern = new RegExp('^4..$');
const redirectPattern = new RegExp('^3..$');
const okPattern = new RegExp('^2..$');
function netRequest(url, method, params = null, data = null) {
    var header = {};
    var authorization = wx.getStorageSync("Authorization");
    if (authorization != null) {
        header = {
            'Authorization': authorization
        };
    }
    let promise = new Promise((resolve, reject) => {
        wx.request({
            url: config_1.default.API + url,
            data: data,
            method: method,
            header: header,
            dataType: "json",
            responseType: "text",
            success: (res) => {
                if (isSuccess(res)) {
                    resolve(res);
                }
                else {
                    reject(res);
                }
            },
            fail: (res) => {
                console.error(`request error`);
                reject(res);
            },
            complete: (res) => {
            }
        });
    });
    return promise;
}
exports.netRequest = netRequest;
function resolveParams(params) {
    let searchParams = new URLSearchParams();
    let paramsStr = '';
    if (params != null) {
        params.forEach((key, value) => {
            searchParams.append(key, value);
        });
        paramsStr = `?${searchParams.toString()}`;
    }
    return paramsStr;
}
function isSuccess(res) {
    let statusCode = String(res.statusCode);
    return !serverErrorPattern.test(statusCode) && !clientErrorPattern.test(statusCode);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29yay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5ldHdvcmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBRUEsNkNBQXNDO0FBR3RDLE1BQU0sa0JBQWtCLEdBQUcsSUFBSSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUM7QUFHL0MsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUcvQyxNQUFNLGVBQWUsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUc1QyxNQUFNLFNBQVMsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUd0QyxTQUFnQixVQUFVLENBQUMsR0FBVyxFQUFFLE1BQWMsRUFBRSxTQUFxQyxJQUFJLEVBQUUsT0FBbUIsSUFBSTtJQUN4SCxJQUFJLE1BQU0sR0FBRyxFQUFFLENBQUE7SUFDZixJQUFJLGFBQWEsR0FBRyxFQUFFLENBQUMsY0FBYyxDQUFDLGVBQWUsQ0FBQyxDQUFBO0lBQ3RELElBQUksYUFBYSxJQUFJLElBQUksRUFBRTtRQUN6QixNQUFNLEdBQUc7WUFDUCxlQUFlLEVBQUUsYUFBYTtTQUMvQixDQUFBO0tBQ0Y7SUFFRCxJQUFJLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUM1QyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ1QsR0FBRyxFQUFFLGdCQUFNLENBQUMsR0FBRyxHQUFHLEdBQUc7WUFDckIsSUFBSSxFQUFFLElBQUk7WUFDVixNQUFNLEVBQUUsTUFBTTtZQUNkLE1BQU0sRUFBRSxNQUFNO1lBQ2QsUUFBUSxFQUFFLE1BQU07WUFDaEIsWUFBWSxFQUFFLE1BQU07WUFDcEIsT0FBTyxFQUFFLENBQUMsR0FBbUQsRUFBRSxFQUFFO2dCQUMvRCxJQUFJLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRTtvQkFDbEIsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNkO3FCQUFNO29CQUNMLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztpQkFDYjtZQUNILENBQUM7WUFFRCxJQUFJLEVBQUUsQ0FBQyxHQUErQyxFQUFFLEVBQUU7Z0JBQ3hELE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUE7Z0JBQzlCLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztZQUNkLENBQUM7WUFFRCxRQUFRLEVBQUUsQ0FBQyxHQUE0QyxFQUFFLEVBQUU7WUFFM0QsQ0FBQztTQUNGLENBQUMsQ0FBQTtJQUNKLENBQUMsQ0FBQyxDQUFBO0lBQ0YsT0FBTyxPQUFPLENBQUE7QUFDaEIsQ0FBQztBQXBDRCxnQ0FvQ0M7QUFNRCxTQUFTLGFBQWEsQ0FBQyxNQUFrQztJQUN2RCxJQUFJLFlBQVksR0FBRyxJQUFJLGVBQWUsRUFBRSxDQUFDO0lBQ3pDLElBQUksU0FBUyxHQUFHLEVBQUUsQ0FBQTtJQUNsQixJQUFJLE1BQU0sSUFBSSxJQUFJLEVBQUU7UUFDbEIsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRTtZQUM1QixZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUNsQyxDQUFDLENBQUMsQ0FBQTtRQUNGLFNBQVMsR0FBRyxJQUFJLFlBQVksQ0FBQyxRQUFRLEVBQUUsRUFBRSxDQUFBO0tBQzFDO0lBQ0QsT0FBTyxTQUFTLENBQUM7QUFDbkIsQ0FBQztBQUlELFNBQVMsU0FBUyxDQUFDLEdBQW1EO0lBQ3BFLElBQUksVUFBVSxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUM7SUFFeEMsT0FBTyxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN0RixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gaW1wb3J0ICdtaW5pcHJvZ3JhbS1hcGktdHlwaW5ncyc7XG4vLy8gPHJlZmVyZW5jZSBsaWI9XCJkb21cIiAvPlxuaW1wb3J0IENvbmZpZyBmcm9tIFwiLi4vY29uZmlnL2NvbmZpZ1wiO1xuXG4vLyA1eHggc3RhdHVzIGNvZGVcbmNvbnN0IHNlcnZlckVycm9yUGF0dGVybiA9IG5ldyBSZWdFeHAoJ141Li4kJyk7IC8vIG9yIC9eNS4uJC9cblxuLy8gNHh4XG5jb25zdCBjbGllbnRFcnJvclBhdHRlcm4gPSBuZXcgUmVnRXhwKCdeNC4uJCcpO1xuXG4vLyAzeHhcbmNvbnN0IHJlZGlyZWN0UGF0dGVybiA9IG5ldyBSZWdFeHAoJ14zLi4kJyk7XG5cbi8vIDJ4eFxuY29uc3Qgb2tQYXR0ZXJuID0gbmV3IFJlZ0V4cCgnXjIuLiQnKTtcblxuXG5leHBvcnQgZnVuY3Rpb24gbmV0UmVxdWVzdCh1cmw6IHN0cmluZywgbWV0aG9kOiBNZXRob2QsIHBhcmFtczogTWFwPFN0cmluZywgU3RyaW5nPiB8IG51bGwgPSBudWxsLCBkYXRhOiBhbnkgfCBudWxsID0gbnVsbCkge1xuICB2YXIgaGVhZGVyID0ge31cbiAgdmFyIGF1dGhvcml6YXRpb24gPSB3eC5nZXRTdG9yYWdlU3luYyhcIkF1dGhvcml6YXRpb25cIilcbiAgaWYgKGF1dGhvcml6YXRpb24gIT0gbnVsbCkge1xuICAgIGhlYWRlciA9IHtcbiAgICAgICdBdXRob3JpemF0aW9uJzogYXV0aG9yaXphdGlvblxuICAgIH1cbiAgfVxuICAvLyBsZXQgcmVxVVJMID0gdXJsXG4gIGxldCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgIHd4LnJlcXVlc3Qoe1xuICAgICAgdXJsOiBDb25maWcuQVBJICsgdXJsLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgaGVhZGVyOiBoZWFkZXIsXG4gICAgICBkYXRhVHlwZTogXCJqc29uXCIsXG4gICAgICByZXNwb25zZVR5cGU6IFwidGV4dFwiLFxuICAgICAgc3VjY2VzczogKHJlczogV2VjaGF0TWluaXByb2dyYW0uUmVxdWVzdFN1Y2Nlc3NDYWxsYmFja1Jlc3VsdCkgPT4ge1xuICAgICAgICBpZiAoaXNTdWNjZXNzKHJlcykpIHtcbiAgICAgICAgICByZXNvbHZlKHJlcyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmVqZWN0KHJlcyk7XG4gICAgICAgIH1cbiAgICAgIH0sXG5cbiAgICAgIGZhaWw6IChyZXM6IFdlY2hhdE1pbmlwcm9ncmFtLkFjY2Vzc0ZhaWxDYWxsYmFja1Jlc3VsdCkgPT4ge1xuICAgICAgICBjb25zb2xlLmVycm9yKGByZXF1ZXN0IGVycm9yYClcbiAgICAgICAgcmVqZWN0KHJlcyk7XG4gICAgICB9LFxuXG4gICAgICBjb21wbGV0ZTogKHJlczogV2VjaGF0TWluaXByb2dyYW0uR2VuZXJhbENhbGxiYWNrUmVzdWx0KSA9PiB7XG4gICAgICAgIC8vIGRvIHNvbWV0aGluZyBhZnRlclxuICAgICAgfVxuICAgIH0pXG4gIH0pXG4gIHJldHVybiBwcm9taXNlXG59XG5cblxuLyoqXG4gKiBSZXF1ZXN0IHBhcmFtcy5cbiAqL1xuZnVuY3Rpb24gcmVzb2x2ZVBhcmFtcyhwYXJhbXM6IE1hcDxzdHJpbmcsIHN0cmluZz4gfCBudWxsKTogc3RyaW5nIHtcbiAgbGV0IHNlYXJjaFBhcmFtcyA9IG5ldyBVUkxTZWFyY2hQYXJhbXMoKTtcbiAgbGV0IHBhcmFtc1N0ciA9ICcnXG4gIGlmIChwYXJhbXMgIT0gbnVsbCkge1xuICAgIHBhcmFtcy5mb3JFYWNoKChrZXksIHZhbHVlKSA9PiB7XG4gICAgICBzZWFyY2hQYXJhbXMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgIH0pXG4gICAgcGFyYW1zU3RyID0gYD8ke3NlYXJjaFBhcmFtcy50b1N0cmluZygpfWBcbiAgfVxuICByZXR1cm4gcGFyYW1zU3RyO1xufVxuXG5cblxuZnVuY3Rpb24gaXNTdWNjZXNzKHJlczogV2VjaGF0TWluaXByb2dyYW0uUmVxdWVzdFN1Y2Nlc3NDYWxsYmFja1Jlc3VsdCk6IGJvb2xlYW4ge1xuICBsZXQgc3RhdHVzQ29kZSA9IFN0cmluZyhyZXMuc3RhdHVzQ29kZSk7XG5cbiAgcmV0dXJuICFzZXJ2ZXJFcnJvclBhdHRlcm4udGVzdChzdGF0dXNDb2RlKSAmJiAhY2xpZW50RXJyb3JQYXR0ZXJuLnRlc3Qoc3RhdHVzQ29kZSk7XG59Il19