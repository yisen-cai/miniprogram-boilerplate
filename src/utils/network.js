"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.netRequest = exports.uploadFile = void 0;
const config_1 = require("../config/config");
const util_1 = require("./util");
const app = (getApp());
const serverErrorPattern = new RegExp('^5..$');
const clientErrorPattern = new RegExp('^4..$');
const redirectPattern = new RegExp('^3..$');
const okPattern = new RegExp('^2..$');
function uploadFile(filePath, folder, self) {
    let key = `${config_1.default.OSS_BUCKET}/${folder}/${util_1.uuid()}`;
    ossSignature().then((res) => {
        let signature = res.data;
        let uploader = wx.uploadFile({
            url: config_1.default.OSS_ROOT,
            filePath: filePath,
            name: 'file',
            formData: {
                name: filePath,
                key: key,
                policy: signature.policy,
                OSSAccessKeyId: signature.ossAccessKeyId,
                signature: signature.signature,
                success_action_status: "200",
                'x-oss-security-token': signature.securityToken
            },
            success: (res) => {
                if (res.statusCode === 204) {
                    console.log('上传成功');
                }
                self.setData({
                    imageSrc: `${config_1.default.OSS_ROOT}/${key}`
                });
            },
            fail: err => {
                console.log(err);
            }
        });
        uploader.onProgressUpdate(res => {
            self.setData({
                uploadProgress: res.progress
            });
        });
    }).catch((res) => {
        console.error(res);
    });
}
exports.uploadFile = uploadFile;
function ossSignature() {
    return netRequest('/aliyun/oss-signature', 'GET');
}
function netRequest(url, method, params = null, data = null) {
    var _a, _b;
    var header = {};
    var authorization = (_a = app.auth) === null || _a === void 0 ? void 0 : _a.accessToken;
    if (authorization != null) {
        if (isExpired()) {
            util_1.wechatLogin((res) => {
                var _a;
                let result = res.data;
                app.auth = result.auth;
                app.user = result.user;
                header = {
                    Authorization: `Bearer ${(_a = app.auth) === null || _a === void 0 ? void 0 : _a.accessToken}`
                };
            });
        }
        else {
            header = {
                Authorization: `Bearer ${(_b = app.auth) === null || _b === void 0 ? void 0 : _b.accessToken}`
            };
        }
    }
    let promise = new Promise((resolve, reject) => {
        wx.request({
            url: `${config_1.default.API}${url}${resolveParams(params)}`,
            data: data,
            method: method,
            header: header,
            dataType: "json",
            responseType: "text",
            success: (res) => {
                if (isSuccess(res)) {
                    resolve(res);
                }
                else {
                    reject(res);
                }
            },
            fail: (res) => {
                console.error('request error');
                reject(res);
            },
            complete: (res) => {
            }
        });
    });
    return promise;
}
exports.netRequest = netRequest;
function isExpired() {
    return app.auth.expiration < new Date().getMilliseconds();
}
function resolveParams(params) {
    if (params != null) {
        let paramsStr = '?';
        params.forEach((key, value) => {
            paramsStr += `${key}=${value}&`;
        });
        return paramsStr.substring(0, paramsStr.length - 1);
    }
    return '';
}
function isSuccess(res) {
    let statusCode = String(res.statusCode);
    return !serverErrorPattern.test(statusCode) && !clientErrorPattern.test(statusCode);
}
//# sourceMappingURL=data:application/json;base64,