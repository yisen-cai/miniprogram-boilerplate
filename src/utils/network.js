"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.netRequest = void 0;
const serverErrorPattern = new RegExp('^5..$');
const clientErrorPattern = new RegExp('^4..$');
const redirectPattern = new RegExp('^3..$');
const okPattern = new RegExp('^2..$');
function netRequest(url, method, params, data) {
    let promise = new Promise((resolve, reject) => {
        wx.request({
            url: url,
            data: data,
            method: method,
            header: {},
            dataType: "json",
            responseType: "text",
            success: (res) => {
                if (isSuccess(res)) {
                    resolve(res);
                }
                else {
                    reject(res);
                }
            },
            fail: (res) => {
                console.error(`request error`);
                reject(res);
            },
            complete: (res) => {
            }
        });
    });
}
exports.netRequest = netRequest;
function resolveParams(params) {
    let searchParams = new URLSearchParams();
    let paramsStr = '';
    if (params != null) {
        params.forEach((key, value) => {
            searchParams.append(key, value);
        });
        paramsStr = `?${searchParams.toString()}`;
    }
    return paramsStr;
}
function isSuccess(res) {
    let statusCode = String(res.statusCode);
    return !serverErrorPattern.test(statusCode) && !clientErrorPattern.test(statusCode);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmV0d29yay5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm5ldHdvcmsudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBSUEsTUFBTSxrQkFBa0IsR0FBRyxJQUFJLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUcvQyxNQUFNLGtCQUFrQixHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRy9DLE1BQU0sZUFBZSxHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBRzVDLE1BQU0sU0FBUyxHQUFHLElBQUksTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBR3RDLFNBQWdCLFVBQVUsQ0FBQyxHQUFXLEVBQUUsTUFBYyxFQUFFLE1BQTJCLEVBQUUsSUFBUztJQUU1RixJQUFJLE9BQU8sR0FBRyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtRQUM1QyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ1QsR0FBRyxFQUFFLEdBQUc7WUFDUixJQUFJLEVBQUUsSUFBSTtZQUNWLE1BQU0sRUFBRSxNQUFNO1lBQ2QsTUFBTSxFQUFFLEVBQUU7WUFDVixRQUFRLEVBQUUsTUFBTTtZQUNoQixZQUFZLEVBQUUsTUFBTTtZQUNwQixPQUFPLEVBQUUsQ0FBQyxHQUFtRCxFQUFFLEVBQUU7Z0JBQy9ELElBQUksU0FBUyxDQUFDLEdBQUcsQ0FBQyxFQUFFO29CQUNsQixPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7aUJBQ2Q7cUJBQU07b0JBQ0wsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNiO1lBQ0gsQ0FBQztZQUVELElBQUksRUFBRSxDQUFDLEdBQStDLEVBQUUsRUFBRTtnQkFDeEQsT0FBTyxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsQ0FBQTtnQkFDOUIsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1lBQ2QsQ0FBQztZQUVELFFBQVEsRUFBRSxDQUFDLEdBQTRDLEVBQUUsRUFBRTtZQUUzRCxDQUFDO1NBQ0YsQ0FBQyxDQUFBO0lBQ0osQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDO0FBNUJELGdDQTRCQztBQU1ELFNBQVMsYUFBYSxDQUFDLE1BQWtDO0lBQ3ZELElBQUksWUFBWSxHQUFHLElBQUksZUFBZSxFQUFFLENBQUM7SUFDekMsSUFBSSxTQUFTLEdBQUcsRUFBRSxDQUFBO0lBQ2xCLElBQUksTUFBTSxJQUFJLElBQUksRUFBRTtRQUNsQixNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxFQUFFO1lBQzVCLFlBQVksQ0FBQyxNQUFNLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ2xDLENBQUMsQ0FBQyxDQUFBO1FBQ0YsU0FBUyxHQUFHLElBQUksWUFBWSxDQUFDLFFBQVEsRUFBRSxFQUFFLENBQUE7S0FDMUM7SUFDRCxPQUFPLFNBQVMsQ0FBQztBQUNuQixDQUFDO0FBSUQsU0FBUyxTQUFTLENBQUMsR0FBbUQ7SUFDcEUsSUFBSSxVQUFVLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsQ0FBQztJQUV4QyxPQUFPLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO0FBQ3RGLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBpbXBvcnQgJ21pbmlwcm9ncmFtLWFwaS10eXBpbmdzJztcbi8vLyA8cmVmZXJlbmNlIGxpYj1cImRvbVwiIC8+XG5cbi8vIDV4eCBzdGF0dXMgY29kZVxuY29uc3Qgc2VydmVyRXJyb3JQYXR0ZXJuID0gbmV3IFJlZ0V4cCgnXjUuLiQnKTsgLy8gb3IgL141Li4kL1xuXG4vLyA0eHhcbmNvbnN0IGNsaWVudEVycm9yUGF0dGVybiA9IG5ldyBSZWdFeHAoJ140Li4kJyk7XG5cbi8vIDN4eFxuY29uc3QgcmVkaXJlY3RQYXR0ZXJuID0gbmV3IFJlZ0V4cCgnXjMuLiQnKTtcblxuLy8gMnh4XG5jb25zdCBva1BhdHRlcm4gPSBuZXcgUmVnRXhwKCdeMi4uJCcpO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBuZXRSZXF1ZXN0KHVybDogc3RyaW5nLCBtZXRob2Q6IE1ldGhvZCwgcGFyYW1zOiBNYXA8c3RyaW5nLCBzdHJpbmc+LCBkYXRhOiBhbnkpOiB2b2lkIHtcbiAgLy8gbGV0IHJlcVVSTCA9IHVybFxuICBsZXQgcHJvbWlzZSA9IG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICB3eC5yZXF1ZXN0KHtcbiAgICAgIHVybDogdXJsLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIG1ldGhvZDogbWV0aG9kLFxuICAgICAgaGVhZGVyOiB7fSxcbiAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcbiAgICAgIHJlc3BvbnNlVHlwZTogXCJ0ZXh0XCIsXG4gICAgICBzdWNjZXNzOiAocmVzOiBXZWNoYXRNaW5pcHJvZ3JhbS5SZXF1ZXN0U3VjY2Vzc0NhbGxiYWNrUmVzdWx0KSA9PiB7XG4gICAgICAgIGlmIChpc1N1Y2Nlc3MocmVzKSkge1xuICAgICAgICAgIHJlc29sdmUocmVzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZWplY3QocmVzKTtcbiAgICAgICAgfVxuICAgICAgfSxcblxuICAgICAgZmFpbDogKHJlczogV2VjaGF0TWluaXByb2dyYW0uQWNjZXNzRmFpbENhbGxiYWNrUmVzdWx0KSA9PiB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoYHJlcXVlc3QgZXJyb3JgKVxuICAgICAgICByZWplY3QocmVzKTtcbiAgICAgIH0sXG5cbiAgICAgIGNvbXBsZXRlOiAocmVzOiBXZWNoYXRNaW5pcHJvZ3JhbS5HZW5lcmFsQ2FsbGJhY2tSZXN1bHQpID0+IHtcbiAgICAgICAgLy8gZG8gc29tZXRoaW5nIGFmdGVyXG4gICAgICB9XG4gICAgfSlcbiAgfSlcbn1cblxuXG4vKipcbiAqIFJlcXVlc3QgcGFyYW1zLlxuICovXG5mdW5jdGlvbiByZXNvbHZlUGFyYW1zKHBhcmFtczogTWFwPHN0cmluZywgc3RyaW5nPiB8IG51bGwpOiBzdHJpbmcge1xuICBsZXQgc2VhcmNoUGFyYW1zID0gbmV3IFVSTFNlYXJjaFBhcmFtcygpO1xuICBsZXQgcGFyYW1zU3RyID0gJydcbiAgaWYgKHBhcmFtcyAhPSBudWxsKSB7XG4gICAgcGFyYW1zLmZvckVhY2goKGtleSwgdmFsdWUpID0+IHtcbiAgICAgIHNlYXJjaFBhcmFtcy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgfSlcbiAgICBwYXJhbXNTdHIgPSBgPyR7c2VhcmNoUGFyYW1zLnRvU3RyaW5nKCl9YFxuICB9XG4gIHJldHVybiBwYXJhbXNTdHI7XG59XG5cblxuXG5mdW5jdGlvbiBpc1N1Y2Nlc3MocmVzOiBXZWNoYXRNaW5pcHJvZ3JhbS5SZXF1ZXN0U3VjY2Vzc0NhbGxiYWNrUmVzdWx0KTogYm9vbGVhbiB7XG4gIGxldCBzdGF0dXNDb2RlID0gU3RyaW5nKHJlcy5zdGF0dXNDb2RlKTtcblxuICByZXR1cm4gIXNlcnZlckVycm9yUGF0dGVybi50ZXN0KHN0YXR1c0NvZGUpICYmICFjbGllbnRFcnJvclBhdHRlcm4udGVzdChzdGF0dXNDb2RlKTtcbn0iXX0=