{"version":3,"sources":["index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nvar Promise = require('any-promise')\nvar assert = require('assert')\n\nmodule.exports = thenify\n\n/**\n * Turn async functions into promises\n *\n * @param {Function} fn\n * @return {Function}\n * @api public\n */\n\nfunction thenify(fn, options) {\n  assert(typeof fn === 'function')\n  return createWrapper(fn, options)\n}\n\n/**\n * Turn async functions into promises and backward compatible with callback\n *\n * @param {Function} fn\n * @return {Function}\n * @api public\n */\n\nthenify.withCallback = function (fn, options) {\n  assert(typeof fn === 'function')\n  options = options || {}\n  options.withCallback = true\n  return createWrapper(fn, options)\n}\n\nfunction createCallback(resolve, reject, multiArgs) {\n  // default to true\n  if (multiArgs === undefined) multiArgs = true\n  return function(err, value) {\n    if (err) return reject(err)\n    var length = arguments.length\n\n    if (length <= 2 || !multiArgs) return resolve(value)\n\n    if (Array.isArray(multiArgs)) {\n      var values = {}\n      for (var i = 1; i < length; i++) values[multiArgs[i - 1]] = arguments[i]\n      return resolve(values)\n    }\n\n    var values = new Array(length - 1)\n    for (var i = 1; i < length; ++i) values[i - 1] = arguments[i]\n    resolve(values)\n  }\n}\n\nfunction createWrapper(fn, options) {\n  options = options || {}\n  var name = fn.name;\n  name = (name || '').replace(/\\s|bound(?!$)/g, '')\n  var newFn = function () {\n    var self = this\n    var len = arguments.length\n    if (options.withCallback) {\n      var lastType = typeof arguments[len - 1]\n      if (lastType === 'function') return fn.apply(self, arguments)\n    }\n    var args = new Array(len + 1)\n    for (var i = 0; i < len; ++i) args[i] = arguments[i]\n    var lastIndex = i\n    return new Promise(function (resolve, reject) {\n      args[lastIndex] = createCallback(resolve, reject, options.multiArgs)\n      fn.apply(self, args)\n    })\n  }\n  Object.defineProperty(newFn, 'name', { value: name })\n  return newFn\n}\n"]}